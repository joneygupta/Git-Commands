References :
1) https://www.edureka.co/blog/interview-questions/git-interview-questions/
2) https://career.guru99.com/top-40-interview-questions-on-git/
----------------------------------------------------------------------------------
=>1)  What is the difference between GIT and SVN?

The difference between GIT and SVN is

a)      Git is less preferred for handling extremely large files or frequently changing binary files while SVN can handle multiple projects stored in the same repository.
b)      GIT does not support ‘commits’ across multiple branches or tags.  Subversion allows the creation of folders at any location in the repository layout.
c)        Gits are unchangeable, while Subversion allows committers to treat a tag as a branch and to create multiple revisions under a tag root.

Summary:


=Git is a distributed VCS; SVN is a non-distributed VCS.
=Git has a centralized server and repository; SVN does not have a centralized server or repository.
=The content in Git is stored as metadata; SVN stores files of content.
=Git branches are easier to work with than SVN branches.
=Git does not have the global revision number feature like SVN has.
=Git has better content protection than SVN.
=Git was developed for Linux kernel by Linus Torvalds; SVN was developed by CollabNet, Inc.
=Git is distributed under GNU, and its maintenance overseen by Junio Hamano; Apache Subversion, or SVN, is distributed under the open source license.


Read more: Difference Between Git and SVN | Difference Between http://www.differencebetween.net/technology/software-technology/difference-between-git-and-svn/#ixzz5K1sYvfeZ

=>2) What are the advantages of using GIT?

a)      Data redundancy and replication
b)      High availability
c)       Only one.git directory per repository
d)      Superior disk utilization and network performance
e)      Collaboration friendly
f)       Any sort of projects can use GIT

=>3) Why GIT better than Subversion?

GIT is an open source version control system; it will allow you to run ‘versions’ of a project, which show the changes that were made to the code overtime also it allows you keep the backtrack if necessary and undo those changes.  
Multiple developers can checkout, and upload changes and each change can then be attributed to a specific developer.

=>4) What does commit object contain?

a)      A set of files, representing the state of a project at a given point of time
b)      Reference to parent commit objects
c)       An SHAI name, a 40 character string that uniquely identifies the commit object.

=>5) What is a ‘conflict’ in git?

A ‘conflict’ arises when the commit that has to be merged has some change in one place, and the current commit also has a change at the same place. Git will not be able to predict which change should take precedence.

=>6)  How can conflict in git resolved?

To resolve the conflict in git, edit the files to fix the conflicting changes and then add the resolved files by running “git add” after that to commit the repaired merge,  run “git commit”. 
Git remembers that you are in the middle of a merger, so it sets the parents of the commit correctly.

=>7) What is Subgit? Why to use Subgit?

‘Subgit’ is a tool for a smooth, stress-free SVN to Git migration.  Subgit is a solution for a company -wide migration from SVN to Git that is:

a)      It is much better than git-svn
b)      No requirement to change the infrastructure that is already placed
c)       Allows to use all git and all sub-version features
d)      Provides genuine stress –free migration experience.

=>8) How can you fix a broken commit?

To fix any broken commit, you will use the command “git commit—amend”. 
By running this command, you can fix the broken commit message in the editor.

=>9) Why is it advisable to create an additional commit rather than amending an existing commit?

There are couple of reason

a)      The amend operation will destroy the state that was previously saved in a commit.  If it’s just the commit message being changed then that’s not an issue.  
But if the contents are being amended then chances of eliminating something important remains more.
b)      Abusing “git commit- amend” can cause a small commit to grow and acquire unrelated changes.

=>10)  What is the difference between git pull and git fetch?

Git pull command pulls new changes or commits from a particular branch from your central repository and updates your target branch in your local repository.
Git fetch is also used for the same purpose but it works in a slightly different way. When you perform a git fetch, it pulls all new commits from the desired branch and stores it in a new branch in your local repository. If you want to reflect these changes in your target branch, git fetch must be followed with a git merge. Your target branch will only be updated after merging the target branch and fetched branch. Just to make it easy for you, remember the equation below:

Git pull = git fetch + git merge

=>11) How do you squash last N commits into a single commit?

There are two options to squash last N commits into a single commit include both of the below mentioned options in your answer:

If you want to write the new commit message from scratch use the following command
git reset –soft HEAD~N &&
git commit
If you want to start editing the new commit message with a concatenation of the existing commit messages then you need to extract those messages and pass them to Git commit for that I will use
git reset –soft HEAD~N &&
git commit –edit -m”$(git log –format=%B –reverse .HEAD@{N})”

=>12) Bare repository in git :
git init -bare

1) We cant edits the files in bare reporsitory, A bare Git repository is a repository that is created without a Working Tree
2) A bare Git repository is typically used as a Remote Repository that is sharing a repository among several different people. 
3) You don't do work right inside the remote repository so there's no Working Tree (the files in your project that you edit), just bare repository data.
4) A bare repository created with git init --bare is for… sharing. If you are collaborating with a team of developers, and need a place to share changes to a repo, 
then you will want to create a bare repository in centralized place where all users can push their changes (often the easy choice is github.com). 
Because git is a distributed version control system, no one will directly edit files in the shared centralized repository. 
5) To summarize :

I use a working directory created with git init or git clone when I want to add, edit and delete files in myproject locally on my dev machine.

When I am ready, I share my local changes with a git push to a bare repository myproject.git (usually on a remote server like github.com) 
so other developers can access my local changes.

